{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3.7.6 64-bit","metadata":{"interpreter":{"hash":"fce654411969459cc1957bf239ad51a7f393660c20c70c6b52fe97a5a22adc48"}}},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6-final"},"colab":{"name":"Corrupted Mars Images","provenance":[{"file_id":"https://gist.github.com/aicrowd-bot/86aab277d60a0fdc48eb87e0d4f82507","timestamp":1617194934685},{"file_id":"1EV90-bvO7twVGf-1OLWO3yCApIjnfA2H","timestamp":1615559821392}],"collapsed_sections":[],"toc_visible":true},"widgets":{"application/vnd.jupyter.widget-state+json":{"bb478d27918d4c2db150334c87095096":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_06eae3ccfa404f24b46b47098190b5c1","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e1629bd62e3f4075b0745640e7a49c94","IPY_MODEL_ffa18c1f21bb4a53ae8e473d758ee3ad"]}},"06eae3ccfa404f24b46b47098190b5c1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e1629bd62e3f4075b0745640e7a49c94":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_1371de96783348d194ba77dad025810c","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":5000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":5000,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_df3bcf4ec3a445958395d87875674c3c"}},"ffa18c1f21bb4a53ae8e473d758ee3ad":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1fec09e367ff49b4852a1492928ae056","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 5000/5000 [01:43&lt;00:00, 48.50it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_730194af9c5c4f80822afcc4cbcfe42c"}},"1371de96783348d194ba77dad025810c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"df3bcf4ec3a445958395d87875674c3c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1fec09e367ff49b4852a1492928ae056":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"730194af9c5c4f80822afcc4cbcfe42c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"-B-S93948YVi"},"source":["![AIcrowd-Logo](https://images.aicrowd.com/raw_images/challenges/banner_file/766/14ef10da78a568e6e546.jpg)\n"]},{"cell_type":"markdown","metadata":{"id":"rLS_caxm8YVq"},"source":["# Getting Started Code for [Image Correction Challenge](https://www.aicrowd.com/challenges/ai-blitz-7/problems/image-correction) on AIcrowd\n","#### Author : Shubhamai"]},{"cell_type":"markdown","metadata":{"id":"o4GNq8468YVr"},"source":["## Download Necessary Packages 📚"]},{"cell_type":"code","metadata":{"collapsed":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"Hqjkq6YR8YVs","executionInfo":{"status":"ok","timestamp":1617193996392,"user_tz":-330,"elapsed":353,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"65f2df04-6513-4729-e102-a39cf6476503"},"source":["!pip install aicrowd-cli"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting aicrowd-cli\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/2c/28/eaa46e7949fe877ca1481b8b72c205c511ce4ce5e81ada9111b51ff40e78/aicrowd_cli-0.1.1-py3-none-any.whl (42kB)\n","\u001b[K     |████████████████████████████████| 51kB 2.4MB/s \n","\u001b[?25hRequirement already satisfied: click<8,>=7.1.2 in /usr/local/lib/python3.7/dist-packages (from aicrowd-cli) (7.1.2)\n","Requirement already satisfied: toml in /usr/local/lib/python3.7/dist-packages (from aicrowd-cli) (0.10.2)\n","Collecting rich\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/2e/9f/3120a7f2187c01ecceac19ee2a711924d371707ce59bac6ec8179f86eb75/rich-10.0.1-py3-none-any.whl (201kB)\n","\u001b[K     |████████████████████████████████| 204kB 6.5MB/s \n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from aicrowd-cli) (4.41.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from aicrowd-cli) (2.23.0)\n","Collecting requests-toolbelt\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/60/ef/7681134338fc097acef8d9b2f8abe0458e4d87559c689a8c306d0957ece5/requests_toolbelt-0.9.1-py2.py3-none-any.whl (54kB)\n","\u001b[K     |████████████████████████████████| 61kB 5.3MB/s \n","\u001b[?25hCollecting gitpython\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a6/99/98019716955ba243657daedd1de8f3a88ca1f5b75057c38e959db22fb87b/GitPython-3.1.14-py3-none-any.whl (159kB)\n","\u001b[K     |████████████████████████████████| 163kB 12.8MB/s \n","\u001b[?25hCollecting colorama<0.5.0,>=0.4.0\n","  Downloading https://files.pythonhosted.org/packages/44/98/5b86278fbbf250d239ae0ecb724f8572af1c91f4a11edf4d36a206189440/colorama-0.4.4-py2.py3-none-any.whl\n","Requirement already satisfied: typing-extensions<4.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from rich->aicrowd-cli) (3.7.4.3)\n","Collecting commonmark<0.10.0,>=0.9.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b1/92/dfd892312d822f36c55366118b95d914e5f16de11044a27cf10a7d71bbbf/commonmark-0.9.1-py2.py3-none-any.whl (51kB)\n","\u001b[K     |████████████████████████████████| 51kB 4.3MB/s \n","\u001b[?25hRequirement already satisfied: pygments<3.0.0,>=2.6.0 in /usr/local/lib/python3.7/dist-packages (from rich->aicrowd-cli) (2.6.1)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->aicrowd-cli) (2020.12.5)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->aicrowd-cli) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->aicrowd-cli) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->aicrowd-cli) (1.24.3)\n","Collecting gitdb<5,>=4.0.1\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ea/e8/f414d1a4f0bbc668ed441f74f44c116d9816833a48bf81d22b697090dba8/gitdb-4.0.7-py3-none-any.whl (63kB)\n","\u001b[K     |████████████████████████████████| 71kB 5.8MB/s \n","\u001b[?25hCollecting smmap<5,>=3.0.1\n","  Downloading https://files.pythonhosted.org/packages/68/ee/d540eb5e5996eb81c26ceffac6ee49041d473bc5125f2aa995cf51ec1cf1/smmap-4.0.0-py2.py3-none-any.whl\n","Installing collected packages: colorama, commonmark, rich, requests-toolbelt, smmap, gitdb, gitpython, aicrowd-cli\n","Successfully installed aicrowd-cli-0.1.1 colorama-0.4.4 commonmark-0.9.1 gitdb-4.0.7 gitpython-3.1.14 requests-toolbelt-0.9.1 rich-10.0.1 smmap-4.0.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"tAYjQrJY8YVv"},"source":["## Download Data\n","The first step is to download out train test data. We will be training a model on the train data and make predictions on test data. We submit our predictions.\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YEoZ01qN8YVw","executionInfo":{"status":"ok","timestamp":1617194005349,"user_tz":-330,"elapsed":3328,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"df70a531-4b70-48ca-c919-d4423cb3bf08"},"source":["API_KEY = \"b46152c118edae059e08ebd1f8ada78f\"\n","!aicrowd login --api-key $API_KEY"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[32mAPI Key valid\u001b[0m\n","\u001b[32mSaved API Key successfully!\u001b[0m\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PvE_D0f78YVx","executionInfo":{"status":"ok","timestamp":1617194064157,"user_tz":-330,"elapsed":51089,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"db099dff-2240-446c-b075-13892f0ab52f"},"source":["!aicrowd dataset download --challenge image-correction -j 3"],"execution_count":null,"outputs":[{"output_type":"stream","text":["train.zip:   0% 0.00/1.59G [00:00<?, ?B/s]\n","train.zip:   2% 33.6M/1.59G [00:01<01:03, 24.6MB/s]\n","\n","train.zip:  11% 168M/1.59G [00:04<00:42, 33.1MB/s]\n","\n","train.zip:  13% 201M/1.59G [00:05<00:41, 33.6MB/s]\n","sample_submission.zip:  81% 33.6M/41.5M [00:05<00:01, 6.35MB/s]\u001b[A\n","sample_submission.zip: 100% 41.5M/41.5M [00:05<00:00, 8.50MB/s]\u001b[A\n","\n","sample_submission.zip: 100% 41.5M/41.5M [00:05<00:00, 7.57MB/s]\n","train.zip:  15% 235M/1.59G [00:06<00:39, 34.6MB/s]\n","\n","train.zip:  17% 268M/1.59G [00:07<00:37, 35.1MB/s]\n","\n","train.zip:  19% 302M/1.59G [00:08<00:36, 35.2MB/s]\n","\n","val.zip:  42% 67.1M/158M [00:02<00:03, 27.3MB/s]\u001b[A\u001b[A\n","train.zip:  21% 336M/1.59G [00:09<00:35, 35.7MB/s]\n","\n","train.zip:  23% 369M/1.59G [00:10<00:34, 35.7MB/s]\n","\n","train.zip:  25% 403M/1.59G [00:11<00:33, 35.7MB/s]\n","\n","val.zip: 100% 158M/158M [00:04<00:00, 33.7MB/s]\n","train.zip:  27% 436M/1.59G [00:12<00:35, 32.5MB/s]\n","train.zip:  36% 570M/1.59G [00:16<00:28, 35.6MB/s]\n","train.zip:  49% 772M/1.59G [00:22<00:23, 35.0MB/s]\n","train.zip:  59% 940M/1.59G [00:27<00:18, 35.8MB/s]\n","train.zip:  70% 1.11G/1.59G [00:31<00:13, 34.5MB/s]\n","train.zip:  80% 1.28G/1.59G [00:37<00:09, 31.5MB/s]\n","train.zip:  91% 1.44G/1.59G [00:41<00:04, 35.5MB/s]\n","train.zip:  95% 1.51G/1.59G [00:43<00:02, 33.6MB/s]\n","test.zip: 100% 315M/315M [00:41<00:00, 7.50MB/s]\n","train.zip: 100% 1.59G/1.59G [00:45<00:00, 34.5MB/s]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"V7CD5K8O8YVx"},"source":["!rm -rf data\n","!mkdir data\n","\n","\n","!unzip train.zip -d data/train >/dev/null\n","!unzip val.zip -d data/val >/dev/null\n","!unzip test.zip -d data/test >/dev/null\n","!unzip sample_submission.zip -d data/sample_submission >/dev/null"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s8hKwHOd8YVx"},"source":["\n","## Import packages"]},{"cell_type":"code","metadata":{"id":"3n6YN-_H8YVy"},"source":["import cv2\n","import matplotlib.pyplot as plt\n","import os\n","from PIL import Image\n","from glob import glob\n","import random\n","from tqdm.notebook import tqdm "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r9HzXoUG8YVz"},"source":["## Load Data"]},{"cell_type":"code","metadata":{"id":"TJV6xoEu8YV0"},"source":["data_directiory = \"data\"\n","test_data_path = os.path.join(data_directiory, \"test/Corrupted_Images\")\n","test_submission_path = \"Labels\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ks8YnlRN8YV0"},"source":["## Visualize the data 👀"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"id":"jeIgF52r8YV0","executionInfo":{"status":"ok","timestamp":1617194119055,"user_tz":-330,"elapsed":1493,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"ce191567-feaf-42db-abd2-569995f1eaa6"},"source":["\n","img = plt.imread(test_data_path+\"/0/start_image.jpg\")\n","plt.imshow(img)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f72d88c6bd0>"]},"metadata":{"tags":[]},"execution_count":7},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"dFGcgjwf-R64"},"source":["# Making a Random Submission"]},{"cell_type":"code","metadata":{"id":"h1zuIWcR-DV4"},"source":["!rm -rf Labels\n","!mkdir Labels"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":66,"referenced_widgets":["bb478d27918d4c2db150334c87095096","06eae3ccfa404f24b46b47098190b5c1","e1629bd62e3f4075b0745640e7a49c94","ffa18c1f21bb4a53ae8e473d758ee3ad","1371de96783348d194ba77dad025810c","df3bcf4ec3a445958395d87875674c3c","1fec09e367ff49b4852a1492928ae056","730194af9c5c4f80822afcc4cbcfe42c"]},"id":"s45Bpv8f8YV1","executionInfo":{"status":"ok","timestamp":1617194217481,"user_tz":-330,"elapsed":98115,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"96f045e8-e3db-42a9-f35d-0affd8f12e15"},"source":["# Output Image Width & hight\n","image_width, image_height = 512, 512\n","\n","# Getting though corrupted images folder\n","for img_folder_name in tqdm(os.listdir(test_data_path)):\n","\n","    # Getting all corrupted images name from the corrupted images folder\n","    img_folder_path = os.path.join(test_data_path, img_folder_name)\n","\n","    # Creating a new blank image\n","    prediction = Image.new(\"RGBA\",(image_width, image_height)) \n","\n","    # Groung though each corrupted image\n","    for _currupted_img_name in glob(os.path.join(img_folder_path, \"*.jpg\")):\n","        \n","        # Opening corrupted image\n","        currupted_im = Image.open(_currupted_img_name)\n","        pp_width, pp_height = currupted_im.size\n","\n","        # Find Random location to paste the corrupted image into the blank image\n","        random_x = random.randint(0, image_width - pp_width)\n","        random_y = random.randint(0, image_height - pp_height)\n","\n","        # pasting the corrupted image into the blank imagee\n","        prediction.paste(currupted_im, (random_x, random_y))\n","\n","    # Saving the output image :)\n","    prediction.convert(\"RGB\").save(os.path.join(test_submission_path, f\"{img_folder_name}.jpg\"))        "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"bb478d27918d4c2db150334c87095096","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=5000.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dvGIPnVG8YV2"},"source":["## Save the prediction to zip"]},{"cell_type":"code","metadata":{"id":"2cRhBMZk8YV2"},"source":["!zip submission.zip -r Labels > /dev/null"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"id":"zioZ6AyM-5mJ","executionInfo":{"status":"ok","timestamp":1617194223949,"user_tz":-330,"elapsed":6453,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"1c409ea4-3d3e-4531-dc93-c9b273222b82"},"source":["sample_output_img = plt.imread(os.path.join(test_submission_path, f\"0.jpg\"))\n","plt.imshow(sample_output_img)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f72d8855290>"]},"metadata":{"tags":[]},"execution_count":11},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"xgEzllVW8YV3"},"source":["## Making direct submission thought aicrowd-cli"]},{"cell_type":"code","metadata":{"id":"EhIKJlHC8YV3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617194287800,"user_tz":-330,"elapsed":59799,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"2c14cfb9-44e6-460b-fc35-621e43c27cd7"},"source":["!aicrowd submission create -c image-correction -f submission.zip"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[2K\u001b[1;34msubmission.zip\u001b[0m \u001b[90m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100.0%\u001b[0m • \u001b[32m124.4/124.4 MB\u001b[0m • \u001b[31m2.4 MB/s\u001b[0m • \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h\u001b[91m╭─\u001b[0m\u001b[91m──────────────────── \u001b[0m\u001b[1;31mTraceback \u001b[0m\u001b[1;2;31m(most recent call last)\u001b[0m\u001b[91m ─────────────────────\u001b[0m\u001b[91m─╮\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/bin/\u001b[0m\u001b[1;33maicrowd\u001b[0m:\u001b[94m8\u001b[0m in \u001b[92m<module>\u001b[0m                                         \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m5 \u001b[0m\u001b[94mfrom\u001b[0m \u001b[4;96maicrowd\u001b[0m\u001b[4;96m.\u001b[0m\u001b[4;96mcli\u001b[0m \u001b[94mimport\u001b[0m cli                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m6 \u001b[0m\u001b[94mif\u001b[0m \u001b[91m__name__\u001b[0m == \u001b[33m'\u001b[0m\u001b[33m__main__\u001b[0m\u001b[33m'\u001b[0m:                                               \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m7 \u001b[0m\u001b[2m│   \u001b[0msys.argv[\u001b[94m0\u001b[0m] = re.sub(\u001b[33mr\u001b[0m\u001b[33m'\u001b[0m\u001b[33m(-script\u001b[0m\u001b[33m\\\u001b[0m\u001b[33m.pyw|\u001b[0m\u001b[33m\\\u001b[0m\u001b[33m.exe)?$\u001b[0m\u001b[33m'\u001b[0m, \u001b[33m'\u001b[0m\u001b[33m'\u001b[0m, sys.argv[\u001b[94m0\u001b[0m])     \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m8 \u001b[2m│   \u001b[0msys.exit(cli())                                                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/click/\u001b[0m\u001b[1;33mcore.py\u001b[0m:\u001b[94m829\u001b[0m in \u001b[92m__call__\u001b[0m         \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 826 \u001b[0m\u001b[2m│   \u001b[0m                                                                  \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 827 \u001b[0m\u001b[2m│   \u001b[0m\u001b[94mdef\u001b[0m \u001b[92m__call__\u001b[0m(\u001b[96mself\u001b[0m, *args, **kwargs):                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 828 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[33m\"\"\"Alias for :meth:`main`.\"\"\"\u001b[0m                                 \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m 829 \u001b[2m│   │   \u001b[0m\u001b[94mreturn\u001b[0m \u001b[96mself\u001b[0m.main(*args, **kwargs)                             \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 830 \u001b[0m                                                                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 831 \u001b[0m                                                                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 832 \u001b[0m\u001b[94mclass\u001b[0m \u001b[4;92mCommand\u001b[0m(BaseCommand):                                           \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/click/\u001b[0m\u001b[1;33mcore.py\u001b[0m:\u001b[94m782\u001b[0m in \u001b[92mmain\u001b[0m             \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 779 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[94mtry\u001b[0m:                                                          \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 780 \u001b[0m\u001b[2m│   │   │   \u001b[0m\u001b[94mtry\u001b[0m:                                                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 781 \u001b[0m\u001b[2m│   │   │   │   \u001b[0m\u001b[94mwith\u001b[0m \u001b[96mself\u001b[0m.make_context(prog_name, args, **extra) \u001b[94mas\u001b[0m c \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m 782 \u001b[2m│   │   │   │   │   \u001b[0mrv = \u001b[96mself\u001b[0m.invoke(ctx)                             \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 783 \u001b[0m\u001b[2m│   │   │   │   │   \u001b[0m\u001b[94mif\u001b[0m \u001b[95mnot\u001b[0m standalone_mode:                           \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 784 \u001b[0m\u001b[2m│   │   │   │   │   │   \u001b[0m\u001b[94mreturn\u001b[0m rv                                     \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 785 \u001b[0m\u001b[2m│   │   │   │   │   \u001b[0m\u001b[2m# it's not safe to `ctx.exit(rv)` here!\u001b[0m           \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/click/\u001b[0m\u001b[1;33mcore.py\u001b[0m:\u001b[94m1259\u001b[0m in \u001b[92minvoke\u001b[0m          \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1256 \u001b[0m\u001b[2m│   │   │   │   \u001b[0mCommand.invoke(\u001b[96mself\u001b[0m, ctx)                             \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1257 \u001b[0m\u001b[2m│   │   │   │   \u001b[0msub_ctx = cmd.make_context(cmd_name, args, parent=ctx \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1258 \u001b[0m\u001b[2m│   │   │   │   \u001b[0m\u001b[94mwith\u001b[0m sub_ctx:                                         \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m1259 \u001b[2m│   │   │   │   │   \u001b[0m\u001b[94mreturn\u001b[0m _process_result(sub_ctx.command.invoke(sub \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1260 \u001b[0m\u001b[2m│   │   \u001b[0m                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1261 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[2m# In chain mode we create the contexts step by step, but afte\u001b[0m \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1262 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[2m# base command has been invoked.  Because at that point we do\u001b[0m \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/click/\u001b[0m\u001b[1;33mcore.py\u001b[0m:\u001b[94m1259\u001b[0m in \u001b[92minvoke\u001b[0m          \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1256 \u001b[0m\u001b[2m│   │   │   │   \u001b[0mCommand.invoke(\u001b[96mself\u001b[0m, ctx)                             \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1257 \u001b[0m\u001b[2m│   │   │   │   \u001b[0msub_ctx = cmd.make_context(cmd_name, args, parent=ctx \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1258 \u001b[0m\u001b[2m│   │   │   │   \u001b[0m\u001b[94mwith\u001b[0m sub_ctx:                                         \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m1259 \u001b[2m│   │   │   │   │   \u001b[0m\u001b[94mreturn\u001b[0m _process_result(sub_ctx.command.invoke(sub \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1260 \u001b[0m\u001b[2m│   │   \u001b[0m                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1261 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[2m# In chain mode we create the contexts step by step, but afte\u001b[0m \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1262 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[2m# base command has been invoked.  Because at that point we do\u001b[0m \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/click/\u001b[0m\u001b[1;33mcore.py\u001b[0m:\u001b[94m1066\u001b[0m in \u001b[92minvoke\u001b[0m          \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1063 \u001b[0m\u001b[2;33m│   │   \u001b[0m\u001b[33m\"\"\"\u001b[0m                                                           \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1064 \u001b[0m\u001b[2m│   │   \u001b[0m_maybe_show_deprecated_notice(\u001b[96mself\u001b[0m)                           \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1065 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[94mif\u001b[0m \u001b[96mself\u001b[0m.callback \u001b[95mis\u001b[0m \u001b[95mnot\u001b[0m \u001b[94mNone\u001b[0m:                                 \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m1066 \u001b[2m│   │   │   \u001b[0m\u001b[94mreturn\u001b[0m ctx.invoke(\u001b[96mself\u001b[0m.callback, **ctx.params)            \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1067 \u001b[0m                                                                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1068 \u001b[0m                                                                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m1069 \u001b[0m\u001b[94mclass\u001b[0m \u001b[4;92mMultiCommand\u001b[0m(Command):                                          \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/click/\u001b[0m\u001b[1;33mcore.py\u001b[0m:\u001b[94m610\u001b[0m in \u001b[92minvoke\u001b[0m           \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 607 \u001b[0m\u001b[2m│   │   \u001b[0margs = args[\u001b[94m2\u001b[0m:]                                               \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 608 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[94mwith\u001b[0m augment_usage_errors(\u001b[96mself\u001b[0m):                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 609 \u001b[0m\u001b[2m│   │   │   \u001b[0m\u001b[94mwith\u001b[0m ctx:                                                 \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m 610 \u001b[2m│   │   │   │   \u001b[0m\u001b[94mreturn\u001b[0m callback(*args, **kwargs)                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 611 \u001b[0m\u001b[2m│   \u001b[0m                                                                  \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 612 \u001b[0m\u001b[2m│   \u001b[0m\u001b[94mdef\u001b[0m \u001b[92mforward\u001b[0m(*args, **kwargs):  \u001b[2m# noqa: B902\u001b[0m                       \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 613 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[33m\"\"\"Similar to :meth:`invoke` but fills in default keyword\u001b[0m     \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/click/\u001b[0m\u001b[1;33mdecorators.py\u001b[0m:\u001b[94m73\u001b[0m in \u001b[92mnew_func\u001b[0m    \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 70 \u001b[0m\u001b[2m│   │   │   │   │   \u001b[0m\u001b[33m\"\u001b[0m\u001b[33mManaged to invoke callback without a context\u001b[0m\u001b[33m\"\u001b[0m     \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 71 \u001b[0m\u001b[2m│   │   │   │   │   \u001b[0m\u001b[33m\"\u001b[0m\u001b[33m object of type \u001b[0m\u001b[33m'\u001b[0m\u001b[33m{}\u001b[0m\u001b[33m'\u001b[0m\u001b[33m existing\u001b[0m\u001b[33m\"\u001b[0m.format(object_type \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 72 \u001b[0m\u001b[2m│   │   │   │   \u001b[0m)                                                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m 73 \u001b[2m│   │   │   \u001b[0m\u001b[94mreturn\u001b[0m ctx.invoke(f, obj, *args, **kwargs)                 \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 74 \u001b[0m\u001b[2m│   │   \u001b[0m                                                               \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 75 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[94mreturn\u001b[0m update_wrapper(new_func, f)                             \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/click/\u001b[0m\u001b[1;33mcore.py\u001b[0m:\u001b[94m610\u001b[0m in \u001b[92minvoke\u001b[0m           \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 607 \u001b[0m\u001b[2m│   │   \u001b[0margs = args[\u001b[94m2\u001b[0m:]                                               \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 608 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[94mwith\u001b[0m augment_usage_errors(\u001b[96mself\u001b[0m):                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 609 \u001b[0m\u001b[2m│   │   │   \u001b[0m\u001b[94mwith\u001b[0m ctx:                                                 \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m 610 \u001b[2m│   │   │   │   \u001b[0m\u001b[94mreturn\u001b[0m callback(*args, **kwargs)                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 611 \u001b[0m\u001b[2m│   \u001b[0m                                                                  \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 612 \u001b[0m\u001b[2m│   \u001b[0m\u001b[94mdef\u001b[0m \u001b[92mforward\u001b[0m(*args, **kwargs):  \u001b[2m# noqa: B902\u001b[0m                       \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 613 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[33m\"\"\"Similar to :meth:`invoke` but fills in default keyword\u001b[0m     \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/click/\u001b[0m\u001b[1;33mdecorators.py\u001b[0m:\u001b[94m73\u001b[0m in \u001b[92mnew_func\u001b[0m    \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 70 \u001b[0m\u001b[2m│   │   │   │   │   \u001b[0m\u001b[33m\"\u001b[0m\u001b[33mManaged to invoke callback without a context\u001b[0m\u001b[33m\"\u001b[0m     \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 71 \u001b[0m\u001b[2m│   │   │   │   │   \u001b[0m\u001b[33m\"\u001b[0m\u001b[33m object of type \u001b[0m\u001b[33m'\u001b[0m\u001b[33m{}\u001b[0m\u001b[33m'\u001b[0m\u001b[33m existing\u001b[0m\u001b[33m\"\u001b[0m.format(object_type \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 72 \u001b[0m\u001b[2m│   │   │   │   \u001b[0m)                                                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m 73 \u001b[2m│   │   │   \u001b[0m\u001b[94mreturn\u001b[0m ctx.invoke(f, obj, *args, **kwargs)                 \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 74 \u001b[0m\u001b[2m│   │   \u001b[0m                                                               \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 75 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[94mreturn\u001b[0m update_wrapper(new_func, f)                             \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/click/\u001b[0m\u001b[1;33mcore.py\u001b[0m:\u001b[94m610\u001b[0m in \u001b[92minvoke\u001b[0m           \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 607 \u001b[0m\u001b[2m│   │   \u001b[0margs = args[\u001b[94m2\u001b[0m:]                                               \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 608 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[94mwith\u001b[0m augment_usage_errors(\u001b[96mself\u001b[0m):                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 609 \u001b[0m\u001b[2m│   │   │   \u001b[0m\u001b[94mwith\u001b[0m ctx:                                                 \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m 610 \u001b[2m│   │   │   │   \u001b[0m\u001b[94mreturn\u001b[0m callback(*args, **kwargs)                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 611 \u001b[0m\u001b[2m│   \u001b[0m                                                                  \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 612 \u001b[0m\u001b[2m│   \u001b[0m\u001b[94mdef\u001b[0m \u001b[92mforward\u001b[0m(*args, **kwargs):  \u001b[2m# noqa: B902\u001b[0m                       \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 613 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[33m\"\"\"Similar to :meth:`invoke` but fills in default keyword\u001b[0m     \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/aicrowd/cmd/\u001b[0m\u001b[1;33msubmission.py\u001b[0m:\u001b[94m81\u001b[0m in       \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[92mcreate_subcommand\u001b[0m                                                            \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 78 \u001b[0m\u001b[2m│   │   │   │   \u001b[0m\u001b[94mTrue\u001b[0m,                                                  \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 79 \u001b[0m\u001b[2m│   │   │   │   \u001b[0mconfig_ctx,                                            \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 80 \u001b[0m\u001b[2m│   │   │   │   \u001b[0mchallenge_ctx,                                         \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m 81 \u001b[2m│   │   │   │   \u001b[0mjupyter=jupyter,                                       \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 82 \u001b[0m\u001b[2m│   │   │   \u001b[0m)                                                          \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 83 \u001b[0m\u001b[2m│   │   \u001b[0m)                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 84 \u001b[0m\u001b[2m│   \u001b[0m\u001b[94mexcept\u001b[0m SubmissionException \u001b[94mas\u001b[0m e:                                   \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/aicrowd/submission/\u001b[0m\u001b[1;33mcreate_cmd.py\u001b[0m:\u001b[94m90\u001b[0m   \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m in \u001b[92mcreate\u001b[0m                                                                    \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m87 \u001b[0m\u001b[2m│   \u001b[0m\u001b[94mif\u001b[0m file_path \u001b[95mis\u001b[0m \u001b[94mNone\u001b[0m:                                               \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m88 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[94mraise\u001b[0m \u001b[96mNotImplementedError\u001b[0m(\u001b[33m\"\u001b[0m\u001b[33mGit based submissions are not ready \u001b[0m \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m89 \u001b[0m\u001b[2m│   \u001b[0m                                                                    \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m90 \u001b[2m│   \u001b[0m\u001b[94mreturn\u001b[0m submit_file(challenge_slug, file_path, description, api_key, \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/aicrowd/submission/\u001b[0m\u001b[1;33mhelpers.py\u001b[0m:\u001b[94m362\u001b[0m in  \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[92msubmit_file\u001b[0m                                                                  \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m359 \u001b[0m\u001b[2m│   \u001b[0m                                                                   \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m360 \u001b[0m\u001b[2m│   \u001b[0m\u001b[94mif\u001b[0m print_links:                                                    \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m361 \u001b[0m\u001b[2m│   │   \u001b[0mprint_submission_links(                                        \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m362 \u001b[2m│   │   │   \u001b[0mchallenge_slug, problem_slug, response.get(\u001b[33m\"\u001b[0m\u001b[33mdata\u001b[0m\u001b[33m\"\u001b[0m, {}).get \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m363 \u001b[0m\u001b[2m│   │   \u001b[0m)                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m364 \u001b[0m\u001b[2m│   \u001b[0m                                                                   \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m365 \u001b[0m\u001b[2m│   \u001b[0m\u001b[94mreturn\u001b[0m response.get(\u001b[33m\"\u001b[0m\u001b[33mdata\u001b[0m\u001b[33m\"\u001b[0m)                                        \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/aicrowd/submission/\u001b[0m\u001b[1;33mhelpers.py\u001b[0m:\u001b[94m295\u001b[0m in  \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[92mprint_submission_links\u001b[0m                                                       \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m292 \u001b[0m\u001b[2m│   \u001b[0m)                                                                  \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m293 \u001b[0m\u001b[2m│   \u001b[0mtable.add_row(\u001b[33m\"\u001b[0m\u001b[33mChallenge page\u001b[0m\u001b[33m\"\u001b[0m, \u001b[33mf\u001b[0m\u001b[33m\"\u001b[0m\u001b[33m{\u001b[0mchallenge_url\u001b[33m}\u001b[0m\u001b[33m\"\u001b[0m)                \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m294 \u001b[0m\u001b[2m│   \u001b[0m                                                                   \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m295 \u001b[2m│   \u001b[0mwidth = calculate_min_table_width(table)                           \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m296 \u001b[0m\u001b[2m│   \u001b[0m                                                                   \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m297 \u001b[0m\u001b[2m│   \u001b[0mconsole = Console(width=width)                                     \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m298 \u001b[0m\u001b[2m│   \u001b[0mtable.min_width = width                                            \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/aicrowd/submission/\u001b[0m\u001b[1;33mhelpers.py\u001b[0m:\u001b[94m53\u001b[0m in   \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[92mcalculate_min_table_width\u001b[0m                                                    \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 50 \u001b[0m\u001b[2;33m│   \u001b[0m\u001b[33mArgs:\u001b[0m                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 51 \u001b[0m\u001b[2;33m│   │   \u001b[0m\u001b[33mtable: rich table\u001b[0m                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 52 \u001b[0m\u001b[2;33m│   \u001b[0m\u001b[33m\"\"\"\u001b[0m                                                                \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m 53 \u001b[2m│   \u001b[0mwidth = \u001b[96msum\u001b[0m(table._calculate_column_widths(Console(), \u001b[94m200\u001b[0m)) + tabl \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 54 \u001b[0m\u001b[2m│   \u001b[0mterm_width = shutil.get_terminal_size().columns                    \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m 55 \u001b[0m\u001b[2m│   \u001b[0m\u001b[94mreturn\u001b[0m \u001b[96mmax\u001b[0m(width, term_width)                                      \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[2;33m/usr/local/lib/python3.7/dist-packages/rich/\u001b[0m\u001b[1;33mtable.py\u001b[0m:\u001b[94m478\u001b[0m in                  \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[92m_calculate_column_widths\u001b[0m                                                     \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m                                                                              \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m475 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[96mself\u001b[0m, console: \u001b[33m\"\u001b[0m\u001b[33mConsole\u001b[0m\u001b[33m\"\u001b[0m, options: \u001b[33m\"\u001b[0m\u001b[33mConsoleOptions\u001b[0m\u001b[33m\"\u001b[0m            \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m476 \u001b[0m\u001b[2m│   \u001b[0m) -> List[\u001b[96mint\u001b[0m]:                                                    \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m477 \u001b[0m\u001b[2m│   │   \u001b[0m\u001b[33m\"\"\"Calculate the widths of each column, including padding, not\u001b[0m \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m \u001b[31m❱ \u001b[0m478 \u001b[2m│   │   \u001b[0mmax_width = options.max_width                                  \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m479 \u001b[0m\u001b[2m│   │   \u001b[0mcolumns = \u001b[96mself\u001b[0m.columns                                         \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m480 \u001b[0m\u001b[2m│   │   \u001b[0mwidth_ranges = [                                               \u001b[91m│\u001b[0m\n","\u001b[91m│\u001b[0m   \u001b[2m481 \u001b[0m\u001b[2m│   │   │   \u001b[0m\u001b[96mself\u001b[0m._measure_column(console, options, column) \u001b[94mfor\u001b[0m column  \u001b[91m│\u001b[0m\n","\u001b[91m╰──────────────────────────────────────────────────────────────────────────────╯\u001b[0m\n","\u001b[1;91mAttributeError: \u001b[0m\u001b[32m'int'\u001b[0m object has no attribute \u001b[32m'max_width'\u001b[0m\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QXi-QiPgSZjf"},"source":[""],"execution_count":null,"outputs":[]}]}